//
//  StyleKit.swift
//  Smartime
//
//  Created by Ricardo Pereira on 08/06/2015.
//  Copyright (c) 2015 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var blueInit: UIColor = UIColor(red: 0.239, green: 0.329, blue: 0.863, alpha: 1.000)
        static var blueFinal: UIColor = UIColor(red: 0.000, green: 0.725, blue: 0.863, alpha: 1.000)
        static var rockBlue: UIColor = UIColor(red: 0.596, green: 0.722, blue: 0.804, alpha: 1.000)
        static var lightSky: UIColor = UIColor(red: 0.584, green: 0.776, blue: 0.984, alpha: 1.000)
        static var cloudBurst: UIColor = UIColor(red: 0.220, green: 0.243, blue: 0.314, alpha: 1.000)
        static var noteBlue: UIColor = UIColor(red: 0.934, green: 0.966, blue: 1.000, alpha: 1.000)
        static var blueForest: UIColor = UIColor(red: 0.115, green: 0.161, blue: 0.432, alpha: 1.000)
        static var coolBlue: UIColor = UIColor(red: 0.000, green: 0.604, blue: 0.973, alpha: 1.000)
        static var deepSkyBlue: UIColor = UIColor(red: 0.000, green: 0.824, blue: 0.988, alpha: 1.000)
        static var cloudRainBlue: UIColor = UIColor(red: 0.345, green: 0.384, blue: 0.498, alpha: 1.000)
        static var blueGradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.blueInit.CGColor, StyleKit.blueInit.blendedColorWithFraction(0.5, ofColor: StyleKit.blueFinal).CGColor, StyleKit.blueFinal.CGColor], [0, 0.34, 1])
        static var darkBlueGradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.blueForest.CGColor, StyleKit.blueForest.blendedColorWithFraction(0.5, ofColor: StyleKit.blueFinal).CGColor, StyleKit.blueFinal.CGColor], [0, 0.34, 1])
        static var softBlueGradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.coolBlue.CGColor, StyleKit.deepSkyBlue.CGColor], [0, 1])
        static var shadow: NSShadow = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.6), offset: CGSizeMake(0.1, 12.1), blurRadius: 15)
    }

    //// Colors

    public class var blueInit: UIColor { return Cache.blueInit }
    public class var blueFinal: UIColor { return Cache.blueFinal }
    public class var rockBlue: UIColor { return Cache.rockBlue }
    public class var lightSky: UIColor { return Cache.lightSky }
    public class var cloudBurst: UIColor { return Cache.cloudBurst }
    public class var noteBlue: UIColor { return Cache.noteBlue }
    public class var blueForest: UIColor { return Cache.blueForest }
    public class var coolBlue: UIColor { return Cache.coolBlue }
    public class var deepSkyBlue: UIColor { return Cache.deepSkyBlue }
    public class var cloudRainBlue: UIColor { return Cache.cloudRainBlue }

    //// Gradients

    public class var blueGradient: CGGradient { return Cache.blueGradient }
    public class var darkBlueGradient: CGGradient { return Cache.darkBlueGradient }
    public class var softBlueGradient: CGGradient { return Cache.softBlueGradient }

    //// Shadows

    public class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    public class func drawLogo(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Smartime Drawing
        var smartimePath = UIBezierPath()
        smartimePath.moveToPoint(CGPointMake(frame.minX + 0.45072 * frame.width, frame.minY + 0.53297 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.45344 * frame.width, frame.minY + 0.53569 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.45150 * frame.width, frame.minY + 0.53395 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.45258 * frame.width, frame.minY + 0.53477 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.55828 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.46446 * frame.width, frame.minY + 0.54937 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.48110 * frame.width, frame.minY + 0.55828 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.56000 * frame.width, frame.minY + 0.49827 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.53314 * frame.width, frame.minY + 0.55828 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56000 * frame.width, frame.minY + 0.53145 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.54024 * frame.width, frame.minY + 0.45401 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56000 * frame.width, frame.minY + 0.48065 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.55228 * frame.width, frame.minY + 0.46499 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.53492 * frame.width, frame.minY + 0.44871 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.53868 * frame.width, frame.minY + 0.45227 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.53724 * frame.width, frame.minY + 0.45047 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.29246 * frame.width, frame.minY + 0.26419 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.26786 * frame.width, frame.minY + 0.26419 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.28540 * frame.width, frame.minY + 0.25877 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.27524 * frame.width, frame.minY + 0.25849 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.26418 * frame.width, frame.minY + 0.29247 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.25904 * frame.width, frame.minY + 0.27099 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.25740 * frame.width, frame.minY + 0.28365 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.45072 * frame.width, frame.minY + 0.53297 * frame.height))
        smartimePath.closePath()
        smartimePath.moveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.00000 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.48056 * frame.width, frame.minY + 0.00098 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.49344 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.48704 * frame.width, frame.minY + 0.00074 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.48056 * frame.width, frame.minY + 0.02172 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.48000 * frame.width, frame.minY + 0.02172 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.48000 * frame.width, frame.minY + 0.23994 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.52000 * frame.width, frame.minY + 0.23994 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.52000 * frame.width, frame.minY + 0.04102 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.96000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.76438 * frame.width, frame.minY + 0.05160 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.96000 * frame.width, frame.minY + 0.25312 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.96000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.96000 * frame.width, frame.minY + 0.75366 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.75368 * frame.width, frame.minY + 0.96000 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.04000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.24634 * frame.width, frame.minY + 0.96000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.04000 * frame.width, frame.minY + 0.75366 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.17492 * frame.width, frame.minY + 0.17485 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.04000 * frame.width, frame.minY + 0.37317 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.09160 * frame.width, frame.minY + 0.25816 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.14650 * frame.width, frame.minY + 0.14643 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.05598 * frame.width, frame.minY + 0.23690 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.36191 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.77616 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22384 * frame.width, frame.minY + 1.00000 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.77618 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.77616 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.22386 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.77618 * frame.width, frame.minY + 0.00000 * frame.height))
        smartimePath.closePath()
        smartimePath.miterLimit = 4;

        smartimePath.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        smartimePath.addClip()
        let smartimeBounds: CGRect = CGPathGetPathBoundingBox(smartimePath.CGPath)
        CGContextDrawLinearGradient(context, StyleKit.blueGradient,
            CGPointMake(smartimeBounds.midX + -21.11 * smartimeBounds.width / 100, smartimeBounds.midY + -21.11 * smartimeBounds.height / 100),
            CGPointMake(smartimeBounds.midX + 11.46 * smartimeBounds.width / 100, smartimeBounds.midY + 21.11 * smartimeBounds.height / 100),
            UInt32(kCGGradientDrawsBeforeStartLocation) | UInt32(kCGGradientDrawsAfterEndLocation))
        CGContextRestoreGState(context)
    }

    public class func drawCover(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let transparent = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)

        //// Gradient Declarations
        let cloudBurstGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.cloudBurst.CGColor, transparent.CGColor], [0, 1])

        //// Rectangle Base Drawing
        let rectangleBaseRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        let rectangleBasePath = UIBezierPath(rect: rectangleBaseRect)
        CGContextSaveGState(context)
        rectangleBasePath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.darkBlueGradient,
            CGPointMake(rectangleBaseRect.midX, rectangleBaseRect.maxY),
            CGPointMake(rectangleBaseRect.midX, rectangleBaseRect.minY),
            0)
        CGContextRestoreGState(context)


        //// Rectangle Dark Drawing
        let rectangleDarkPath = UIBezierPath(rect: CGRectMake(frame.minX + floor((frame.width) * 0.00000 + 0.5), frame.minY, frame.width - floor((frame.width) * 0.00000 + 0.5), floor((frame.height) * 1.00000 + 0.5)))
        CGContextSaveGState(context)
        rectangleDarkPath.addClip()
        let rectangleDarkRotatedPath = UIBezierPath()
        rectangleDarkRotatedPath.appendPath(rectangleDarkPath)
        var rectangleDarkTransform = CGAffineTransformMakeRotation(45*(-CGFloat(M_PI)/180))
        rectangleDarkRotatedPath.applyTransform(rectangleDarkTransform)
        var rectangleDarkBounds = CGPathGetPathBoundingBox(rectangleDarkRotatedPath.CGPath)
        rectangleDarkTransform = CGAffineTransformInvert(rectangleDarkTransform)

        CGContextDrawLinearGradient(context, cloudBurstGradient,
            CGPointApplyAffineTransform(CGPointMake(rectangleDarkBounds.minX, rectangleDarkBounds.midY), rectangleDarkTransform),
            CGPointApplyAffineTransform(CGPointMake(rectangleDarkBounds.maxX, rectangleDarkBounds.midY), rectangleDarkTransform),
            0)
        CGContextRestoreGState(context)
    }

    public class func drawTicket(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 10)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.softBlueGradient,
            CGPointMake(rectangleRect.midX, rectangleRect.maxY),
            CGPointMake(rectangleRect.midX, rectangleRect.minY),
            0)
        CGContextRestoreGState(context)
    }

    public class func drawAbout(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(frame.minX, frame.minY, frame.width, frame.height))
        CGContextSaveGState(context)
        rectanglePath.addClip()
        let rectangleRotatedPath = UIBezierPath()
        rectangleRotatedPath.appendPath(rectanglePath)
        var rectangleTransform = CGAffineTransformMakeRotation(-135*(-CGFloat(M_PI)/180))
        rectangleRotatedPath.applyTransform(rectangleTransform)
        var rectangleBounds = CGPathGetPathBoundingBox(rectangleRotatedPath.CGPath)
        rectangleTransform = CGAffineTransformInvert(rectangleTransform)

        CGContextDrawLinearGradient(context, StyleKit.softBlueGradient,
            CGPointApplyAffineTransform(CGPointMake(rectangleBounds.minX, rectangleBounds.midY), rectangleTransform),
            CGPointApplyAffineTransform(CGPointMake(rectangleBounds.maxX, rectangleBounds.midY), rectangleTransform),
            0)
        CGContextRestoreGState(context)
    }

    public class func drawSoftLogo(#frame: CGRect) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(frame.minX, frame.minY, frame.width, frame.height))
        StyleKit.cloudBurst.setFill()
        rectanglePath.fill()


        //// Smartime Drawing
        var smartimePath = UIBezierPath()
        smartimePath.moveToPoint(CGPointMake(frame.minX + 0.45072 * frame.width, frame.minY + 0.53297 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.45344 * frame.width, frame.minY + 0.53569 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.45150 * frame.width, frame.minY + 0.53395 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.45258 * frame.width, frame.minY + 0.53477 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.55828 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.46446 * frame.width, frame.minY + 0.54937 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.48110 * frame.width, frame.minY + 0.55828 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.56000 * frame.width, frame.minY + 0.49827 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.53314 * frame.width, frame.minY + 0.55828 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.56000 * frame.width, frame.minY + 0.53145 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.54024 * frame.width, frame.minY + 0.45401 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56000 * frame.width, frame.minY + 0.48065 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.55228 * frame.width, frame.minY + 0.46499 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.53492 * frame.width, frame.minY + 0.44871 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.53868 * frame.width, frame.minY + 0.45227 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.53724 * frame.width, frame.minY + 0.45047 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.29246 * frame.width, frame.minY + 0.26419 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.26786 * frame.width, frame.minY + 0.26419 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.28540 * frame.width, frame.minY + 0.25877 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.27524 * frame.width, frame.minY + 0.25849 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.26418 * frame.width, frame.minY + 0.29247 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.25904 * frame.width, frame.minY + 0.27099 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.25740 * frame.width, frame.minY + 0.28365 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.45072 * frame.width, frame.minY + 0.53297 * frame.height))
        smartimePath.closePath()
        smartimePath.moveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.00000 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.48056 * frame.width, frame.minY + 0.00098 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.49344 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.48704 * frame.width, frame.minY + 0.00074 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.48056 * frame.width, frame.minY + 0.02172 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.48000 * frame.width, frame.minY + 0.02172 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.48000 * frame.width, frame.minY + 0.23994 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.52000 * frame.width, frame.minY + 0.23994 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.52000 * frame.width, frame.minY + 0.04102 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.96000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.76438 * frame.width, frame.minY + 0.05160 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.96000 * frame.width, frame.minY + 0.25312 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.96000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.96000 * frame.width, frame.minY + 0.75366 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.75368 * frame.width, frame.minY + 0.96000 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.04000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.24634 * frame.width, frame.minY + 0.96000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.04000 * frame.width, frame.minY + 0.75366 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.17492 * frame.width, frame.minY + 0.17485 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.04000 * frame.width, frame.minY + 0.37317 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.09160 * frame.width, frame.minY + 0.25816 * frame.height))
        smartimePath.addLineToPoint(CGPointMake(frame.minX + 0.14650 * frame.width, frame.minY + 0.14643 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.05598 * frame.width, frame.minY + 0.23690 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.36191 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.77616 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22384 * frame.width, frame.minY + 1.00000 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.77618 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.77616 * frame.height))
        smartimePath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.22386 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.77618 * frame.width, frame.minY + 0.00000 * frame.height))
        smartimePath.closePath()
        smartimePath.miterLimit = 4;

        smartimePath.usesEvenOddFillRule = true;

        StyleKit.cloudRainBlue.setFill()
        smartimePath.fill()
    }

    //// Generated Images

    public class func imageOfLogo(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawLogo(frame: frame)

        let imageOfLogo = UIGraphicsGetImageFromCurrentImageContext()!.imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return imageOfLogo
    }

    public class func imageOfSoftLogo(#frame: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSoftLogo(frame: frame)

        let imageOfSoftLogo = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSoftLogo
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
